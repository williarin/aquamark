name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master
  schedule:
    # Run every day at 2 AM UTC to test with latest WordPress
    - cron: '0 2 * * *'
  workflow_dispatch:

# Prevents multiple runs from conflicting with each other
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test with WordPress
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['8.1', '8.3']
        wordpress: ['latest', '6.6', '6.5']
        include:
          - php: '8.1'
            wordpress: 'minimum'
            WP_VERSION: '6.0'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, intl, gd, imagick
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: make install

      - name: Run plugin tests
        run: composer test

      - name: Build plugin
        run: make build

      - name: Run Plugin Check
        uses: WordPress/plugin-check-action@v1
        with:
          build-dir: 'build/aquamark/'

  update-tested-up-to:
    name: Update Tested Up To & Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: [test]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest WordPress version
        id: wp_version
        run: |
          LATEST_WP_VERSION=$(curl -s https://api.wordpress.org/core/version-check/1.7/ | jq -r '.offers[0].version')
          LATEST_WP_VERSION_MAJOR=$(echo "$LATEST_WP_VERSION" | cut -d '.' -f 1,2)
          echo "latest=$LATEST_WP_VERSION_MAJOR" >> $GITHUB_OUTPUT

      - name: Get current Tested Up To version from readme.txt
        id: current_version
        run: |
          CURRENT_README_VERSION=$(grep -i "Tested up to:" readme.txt | awk -F': ' '{print $2}' | tr -d '[:space:]')
          echo "current=$CURRENT_README_VERSION" >> $GITHUB_OUTPUT
          echo "Comparing latest WP version (${{ steps.wp_version.outputs.latest }}) with readme version ($CURRENT_README_VERSION)"

      - name: Update readme.txt if needed
        if: steps.wp_version.outputs.latest != steps.current_version.outputs.current
        run: |
          sed -i "s/Tested up to: .*/Tested up to: ${{ steps.wp_version.outputs.latest }}/" readme.txt
          echo "readme.txt updated to version ${{ steps.wp_version.outputs.latest }}"

      - name: Bump patch version
        if: steps.wp_version.outputs.latest != steps.current_version.outputs.current
        id: tag_version
        uses: anothrNick/github-tag-action@1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_PREFIX: v
          DEFAULT_BUMP: patch
          DRY_RUN: true # Get the new tag name without actually creating it yet

      - name: Update CHANGELOG.md
        if: steps.wp_version.outputs.latest != steps.current_version.outputs.current
        run: |
          NEW_VERSION_NUMBER=$(echo "${{ steps.tag_version.outputs.new_tag }}" | sed 's/^v//')
          TODAY=$(date +'%Y-%m-%d')
          CHANGELOG_ENTRY="## [$NEW_VERSION_NUMBER] - $TODAY\n\n### Changed\n\n- Compatibility: Update 'Tested up to' version to ${{ steps.wp_version.outputs.latest }}.\n"
          awk -v entry="$CHANGELOG_ENTRY" '
            !done && /^## \[/ {
              print entry;
              done=1;
            }
            { print }
          ' CHANGELOG.md > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md
          echo "CHANGELOG.md updated for version $NEW_VERSION_NUMBER"

      - name: Update readme.txt changelog
        if: steps.wp_version.outputs.latest != steps.current_version.outputs.current
        run: |
          NEW_VERSION_NUMBER=$(echo "${{ steps.tag_version.outputs.new_tag }}" | sed 's/^v//')
          README_ENTRY="= $NEW_VERSION_NUMBER =\n* Compatibility: Update 'Tested up to' version to ${{ steps.wp_version.outputs.latest }}.\n"
          awk -v entry="$README_ENTRY" '
            !done && /^== Changelog ==/ {
              print;
              print "";
              printf entry;
              done=1;
              next;
            }
            { print }
          ' readme.txt > readme.txt.tmp && mv readme.txt.tmp readme.txt
          echo "readme.txt changelog updated for version $NEW_VERSION_NUMBER"

      - name: Commit changes
        if: steps.wp_version.outputs.latest != steps.current_version.outputs.current
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update Tested up to version to ${{ steps.wp_version.outputs.latest }} and update changelog"
          file_pattern: "readme.txt CHANGELOG.md"

      - name: Push new tag
        if: steps.wp_version.outputs.latest != steps.current_version.outputs.current
        uses: anothrNick/github-tag-action@1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_PREFIX: v
          DEFAULT_BUMP: patch

  release:
    name: Create Release and Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Build plugin
        run: make build

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Get Release Notes From Changelog
        id: get_release_notes
        uses: nickohold/changelog-version-extractor@v1.0.0
        with:
          version_prefix: "## ["
          version: ${{ steps.get_version.outputs.version }}
          changelog_path: 'CHANGELOG.md'

      - name: Create GitHub Release and Upload Zip
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.get_release_notes.outputs.changelog }}
          generateReleaseNotes: false
          artifacts: "aquamark.zip"

      - name: Upload plugin zip for deployment
        uses: actions/upload-artifact@v4
        with:
          name: plugin-zip
          path: aquamark.zip

  deploy:
    name: WordPress Plugin Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [release]
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download plugin zip
        uses: actions/download-artifact@v4
        with:
          name: plugin-zip

      - name: Unzip plugin artifact
        run: unzip aquamark.zip

      - name: WordPress Plugin Deploy
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          SLUG: aquamark
          BUILD_DIR: aquamark/
          ASSETS_DIR: ".wordpress-org"
